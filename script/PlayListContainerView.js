// Generated by CoffeeScript 1.6.2
/*
* A view to display/manage playlists
*/


(function() {
  var CLS_NOW_PLAYING, CLS_PLAYLIST_EDIT;

  CLS_PLAYLIST_EDIT = 'playlist-edit';

  CLS_NOW_PLAYING = 'now-playing';

  define(['jQueryUITouchPunch', 'Backpack', 'CurrentModelPlugin', 'PlayItemView', 'text!template/PlayListContainerView.html'], function($, Backpack, CurrentModelPlugin, PlayItemView, viewTemplate) {
    return Backpack.View.extend({
      template: _.template(viewTemplate),
      events: {
        'click .song-list-button': 'onSongListButtonClicked',
        'click .edit-button': 'onEditButtonClicked',
        'click .done-button': 'onDoneButtonClicked'
      },
      /*
      * Sets up playlist view
      */

      initialize: function(options) {
        var collection, view;

        Backpack.View.prototype.initialize.apply(this, arguments);
        this.render();
        collection = new Backpack.Collection(null, {
          model: Backpack.Model,
          plugins: [CurrentModelPlugin],
          subscribers: {
            SONG_STARTED: 'setCurrentModel',
            SONG_FINISHED: 'onSongFinished',
            PLAYLIST_ITEM_ADD: 'add',
            PLAYLIST_ITEM_INSERT: 'insertAfterCurrent'
          },
          publishers: {
            setCurrentIndex: 'PLAYLIST_INDEX_UPDATED'
          },
          onSongFinished: function() {
            var model;

            model = this.next();
            if (model) {
              Backbone.trigger('PLAYER_PLAY', model);
            }
          }
        });
        view = this.listView = new Backpack.ListView({
          collection: collection,
          itemClass: PlayItemView,
          plugins: [Backpack.ContainerPlugin, Backpack.SortablePlugin],
          subscribers: {
            PLAYLIST_INDEX_UPDATED: 'onCurrentIndexUpdated'
          },
          sortable: false,
          sortableOptions: {
            handle: ".reorder-handle"
          },
          onCurrentIndexUpdated: function(index) {
            if (this._nowPlayingView) {
              this._nowPlayingView.$el.removeClass(CLS_NOW_PLAYING);
            }
            if (index >= 0) {
              this._nowPlayingView = this.getChild(index);
              this._nowPlayingView.$el.addClass(CLS_NOW_PLAYING);
            }
          }
        });
        view.render();
        this.$('#playlist-view').append(view.$el);
        this.setEditMode(false);
      },
      /*
      * Renders template HTML
      */

      render: function() {
        this.$el.html(this.template());
        return this;
      },
      /*
      * Click event handler for [Song List] button
      * When clicked, song list page opens
      */

      onSongListButtonClicked: function() {},
      /*
      * Turn on/off edit mode
      * When in edit mode, allows deleting/drag & drop play list items
      * @param {Boolean} bEdit if true, turns on edit mode. If false, turns off edit mode.
      */

      setEditMode: function(bEdit) {
        this.listView.setSortable(bEdit);
        if (bEdit) {
          this.$el.addClass(CLS_PLAYLIST_EDIT);
        } else {
          this.$el.removeClass(CLS_PLAYLIST_EDIT);
        }
      },
      /*
      * Click event handler for [Edit] button
      * Turns on edit mode when clicked
      */

      onEditButtonClicked: function() {
        this.setEditMode(true);
      },
      /*
      * Click event handler for [Edit] button
      * Turns off edit mode when clicked
      */

      onDoneButtonClicked: function() {
        this.setEditMode(false);
      }
    });
  });

}).call(this);
